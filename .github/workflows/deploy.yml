name: Deploy to EC2

on:
  pull_request:
    types: [closed]
    branches: [main]


jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

    - name: Setup known_hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
    
    - name: Create application directory
      run: |
        ssh ubuntu@${{ secrets.EC2_HOST }} "mkdir -p ~/application"
    
    - name : Create .env file
      run: |
        ssh ubuntu@${{ secrets.EC2_HOST }} "cat > ~/application/.env << 'EOL'
        API_V1_STR=/api/v1
        ALGORITHM=HS256
        ACCESS_TOKEN_EXPIRE_MINUTES=30
        DATABASE_URL=${{ secrets.DATABASE_URL }}
        AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION=${{ vars.AWS_REGION }}
        AWS_ACCOUNT_ID=${{ secrets.AWS_ACCOUNT_ID }}
        IOT_CUSTOMER_POLICY_NAME=${{ secrets.IOT_CUSTOMER_POLICY_NAME }}
        IOT_CUSTOMER_POLICY_ARN=${{ secrets.IOT_CUSTOMER_POLICY_ARN }}
        S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}
        S3_CERTIFICATES_PATH=${{ vars.S3_CERTIFICATES_PATH }}
        TIMESTREAM_RAW_TABLE=${{ secrets.TIMESTREAM_RAW_TABLE }}
        TIMESTREAM_DATABASE=${{ secrets.TIMESTREAM_DATABASE }}
        INTERNAL_API_KEY=${{ secrets.INTERNAL_API_KEY }}
        EOL"

    - name: Deploy to EC2
      run: |
        # Copy project files to server
        scp -r ./* ubuntu@${{ secrets.EC2_HOST }}:~/application

        # Connect to server and run deployment script
        ssh ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
          cd application
          # Build and start Docker container
          docker build -t platform-backend:latest .
          # stop any running container
          docker stop platform-backend-container || true
          docker rm platform-backend-container || true

          # Run the new container
          
          docker run -d --name platform-backend-container \
            -p 8000:80 \
            -v /opt/data/app_docker:/data \
            -v /home/ubuntu/application/.env:/code/.env \
            --user app_docker \
            platform-backend:latest
          echo "Deployment completed successfully!"
        EOF
    
