name: Deploy to EC2

on:
  pull_request:
    types: [closed]
    branches: [api/v2]


jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

    - name: Setup known_hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
    
    - name: Create application directory
      run: |
        ssh ubuntu@${{ secrets.EC2_HOST }} "mkdir -p ~/apiv2"
    
    - name : Create .env file
      run: |
        ssh ubuntu@${{ secrets.EC2_HOST }} "cat > ~/apiv2/.env << 'EOL'
        API_V1_STR=/api/v2
        ALGORITHM=HS256
        ACCESS_TOKEN_EXPIRE_MINUTES=30
        ASYNC_DATABASE_URL=${{ secrets.ASYNC_DATABASE_URL }}
        AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION=${{ vars.AWS_REGION }}
        AWS_ACCOUNT_ID=${{ secrets.AWS_ACCOUNT_ID }}
        IOT_CUSTOMER_POLICY_NAME=${{ secrets.IOT_CUSTOMER_POLICY_NAME }}
        IOT_CUSTOMER_POLICY_ARN=${{ secrets.IOT_CUSTOMER_POLICY_ARN }}
        IOT_DEVICE_POLICY_NAME=${{ secrets.IOT_DEVICE_POLICY_NAME }}
        IOT_DEVICE_POLICY_ARN=${{ secrets.IOT_DEVICE_POLICY_ARN }}
        S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}
        S3_CERTIFICATES_PATH=${{ vars.S3_CERTIFICATES_PATH }}
        INTERNAL_API_KEY=${{ secrets.INTERNAL_API_KEY }}
        SMTP_SERVER=${{ secrets.SMTP_SERVER }}
        SMTP_PORT=${{ secrets.SMTP_PORT }}
        SMTP_USER=${{ secrets.SMTP_USER }}
        SMTP_PASSWORD=${{ secrets.SMTP_PASSWORD }}
        EMAIL_FROM=${{ secrets.EMAIL_FROM }}
        FRONTEND_URL=${{ secrets.FRONTEND_URL }}
        RESTART_APP_TEMPLATE_ARN=${{ secrets.RESTART_APP_TEMPLATE_ARN }}
        REBOOT_TEMPLATE_ARN=${{ secrets.REBOOT_TEMPLATE_ARN }}
        AI_MODEL_BUCKET_NAME=${{ secrets.AI_MODEL_BUCKET_NAME }}
        S3_SOLUTION_PACKAGE_BUCKET=${{ secrets.S3_SOLUTION_PACKAGE_BUCKET }}
        INFLUXDB_HOST=${{ secrets.INFLUXDB_HOST }}
        INFLUXDB_TOKEN=${{ secrets.INFLUXDB_TOKEN }}
        INFLUXDB_DATABASE=${{ secrets.INFLUXDB_DATABASE }}

        EOL"

    - name: Deploy to EC2
      run: |
        # Copy project files to server
        scp -r ./* ubuntu@${{ secrets.EC2_HOST }}:~/apiv2

        # Connect to server and run deployment script
        ssh ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
          cd apiv2
          # Build and start Docker container
          docker build -t platform-backend-apiv2:latest .
          # stop any running container
          docker stop platform-backend-apiv2-container || true
          docker rm platform-backend-apiv2-container || true

          # Run the new container
          docker run -d --name platform-backend-apiv2-container \
            -p 8001:80 \
            -v /opt/data/app_docker_apiv2:/data \
            -v /home/ubuntu/apiv2/.env:/code/.env \
            --user app_docker \
            platform-backend-apiv2:latest
          echo "Deployment completed successfully!"
        EOF
    
