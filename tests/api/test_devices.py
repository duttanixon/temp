"""
Test cases for device management routes
"""
import pytest
import uuid
from unittest.mock import patch, MagicMock
from fastapi.testclient import TestClient
from sqlalchemy.orm import Session

from app.models.audit_log import AuditLog
from app.models.device import Device, DeviceStatus, DeviceType
from app.models.customer import Customer
from app.models.user import User
from app.core.config import settings
from datetime import datetime

# Test cases for device listing (GET /devices)
def test_get_all_devices_admin(client: TestClient, admin_token: str):
    """Test admin getting all devices"""
    response = client.get(
        f"{settings.API_V1_STR}/devices",
        headers={"Authorization": f"Bearer {admin_token}"}
    )
    # Check response
    assert response.status_code == 200
    data = response.json()
    assert isinstance(data, list)
    # Should return at least one device
    assert len(data) >= 1
    

def test_get_devices_by_customer_admin(client: TestClient, customer_admin_token: str, customer: Customer, device: Device):
    """Test getting devices filtered by customer_id"""
    response = client.get(
        f"{settings.API_V1_STR}/devices?customer_id={customer.customer_id}",
        headers={"Authorization": f"Bearer {customer_admin_token}"}
    )
    
    # Check response
    assert response.status_code == 200
    data = response.json()
    assert isinstance(data, list)
    # All returned devices should belong to the specified customer
    for device_item in data:
        assert str(device_item["customer_id"]) == str(customer.customer_id)


def test_get_devices_by_customer_user(client: TestClient, customer_user_token: str, customer_user: User, device: Device):
    """Test customer user getting their customer's devices"""
    response = client.get(
        f"{settings.API_V1_STR}/devices",
        headers={"Authorization": f"Bearer {customer_user_token}"}
    )
    
    # Check response
    assert response.status_code == 200
    data = response.json()
    assert isinstance(data, list)
    # All returned devices should belong to the user's customer
    for device_item in data:
        assert str(device_item["customer_id"]) == str(customer_user.customer_id)


def test_get_devices_customer_user_different_customer(client: TestClient, customer_user_token: str, suspended_customer: Customer):
    """Test customer user attempting to get devices from a different customer"""
    response = client.get(
        f"{settings.API_V1_STR}/devices?customer_id={suspended_customer.customer_id}",
        headers={"Authorization": f"Bearer {customer_user_token}"}
    )
    
    # Check response - should be forbidden
    assert response.status_code == 403
    data = response.json()
    assert "detail" in data
    assert "Not authorized" in data["detail"]


# Test cases for device creation (POST /devices)
def test_create_device_admin(client: TestClient, db: Session, admin_token: str, customer: Customer):
    """Test admin creating a new device"""
    device_data = {
        "description": "A test device",
        "mac_address": "00:11:22:33:44:56",
        "serial_number": "SN123456789",
        "device_type": "NVIDIA_JETSON",
        "firmware_version": "1.0.0",
        "location": "Test Location",
        "customer_id": str(customer.customer_id),
        "ip_address": "192.168.1.100"
    }
    
    response = client.post(
        f"{settings.API_V1_STR}/devices",
        headers={"Authorization": f"Bearer {admin_token}"},
        json=device_data
    )
    
    # Check response
    assert response.status_code == 200
    data = response.json()
    assert "device_id" in data
    assert "name" in data  # Generated by the system
    assert data["mac_address"] == device_data["mac_address"]
    assert data["device_type"] == device_data["device_type"]
    assert str(data["customer_id"]) == device_data["customer_id"]
    
    # Verify device was created in database
    db.expire_all()
    created_device = db.query(Device).filter(Device.device_id == uuid.UUID(data["device_id"])).first()
    assert created_device is not None
    assert created_device.mac_address == device_data["mac_address"]
    
    # Verify audit log
    audit_log = db.query(AuditLog).filter(
        AuditLog.action_type == "DEVICE_CREATE",
        AuditLog.resource_id == str(created_device.device_id)
    ).first()
    assert audit_log is not None

def test_create_device_engineer(client: TestClient, engineer_token: str, customer: Customer):
    """Test engineer creating a new device"""
    device_data = {
        "description": "A test device created by engineer",
        "mac_address": "BB:BB:CC:DD:EE:FF",
        "serial_number": "SN987654321",
        "device_type": "RASPBERRY_PI",
        "firmware_version": "2.0.0",
        "location": "Engineer Location",
        "customer_id": str(customer.customer_id),
        "ip_address": "192.168.1.200"
    }
    
    response = client.post(
        f"{settings.API_V1_STR}/devices",
        headers={"Authorization": f"Bearer {engineer_token}"},
        json=device_data
    )
    
    # Check response
    assert response.status_code == 200
    data = response.json()
    assert "device_id" in data
    assert data["mac_address"] == device_data["mac_address"]


def test_create_device_customer_user(client: TestClient, customer_user_token: str, customer: Customer):
    """Test customer user attempting to create a device"""
    device_data = {
        "description": "A test device created by customer user",
        "mac_address": "12:22:33:44:55:66",
        "serial_number": "SNXXXXXXXX",
        "device_type": "NVIDIA_JETSON",
        "firmware_version": "1.0.0",
        "location": "User Location",
        "customer_id": str(customer.customer_id),
        "ip_address": "192.168.1.300"
    }
    
    response = client.post(
        f"{settings.API_V1_STR}/devices",
        headers={"Authorization": f"Bearer {customer_user_token}"},
        json=device_data
    )
    
    # Check response - should be forbidden
    assert response.status_code == 403
    data = response.json()
    assert "detail" in data
    assert "enough privileges" in data["detail"]

def test_create_device_duplicate_mac(client: TestClient, db: Session, admin_token: str, customer: Customer, device: Device):
    """Test creating a device with duplicate MAC address"""
    # Try to create another device with the same MAC address as an existing device
    duplicate_data = {
        "description": "Duplicate Device",
        "mac_address": device.mac_address,  # Use existing MAC address
        "serial_number": "SNDUPLICATE",
        "device_type": "NVIDIA_JETSON",
        "firmware_version": "1.0.0",
        "location": "Duplicate Location",
        "customer_id": str(customer.customer_id),
        "ip_address": "192.168.1.100"
    }
    
    response = client.post(
        f"{settings.API_V1_STR}/devices",
        headers={"Authorization": f"Bearer {admin_token}"},
        json=duplicate_data
    )
    
    # Check response - should fail
    assert response.status_code == 400
    data = response.json()
    assert "detail" in data
    assert "already exists" in data["detail"]

def test_create_device_nonexistent_customer(client: TestClient, admin_token: str):
    """Test creating a device with non-existent customer"""
    nonexistent_id = uuid.uuid4()
    device_data = {
        "description": "A test device",
        "mac_address": "99:88:77:66:55:44",
        "serial_number": "SNABCDEF",
        "device_type": "RASPBERRY_PI",
        "firmware_version": "1.0.0",
        "location": "Nowhere",
        "customer_id": str(nonexistent_id),
        "ip_address": "192.168.1.100"
    }
    
    response = client.post(
        f"{settings.API_V1_STR}/devices",
        headers={"Authorization": f"Bearer {admin_token}"},
        json=device_data
    )
    
    # Check response - should fail
    assert response.status_code == 404
    data = response.json()
    assert "detail" in data
    assert "Customer not found" in data["detail"]

# Test cases for getting a specific device (GET /devices/{device_id})
def test_get_device_by_id_admin(client: TestClient, admin_token: str, device: Device):
    """Test admin getting a device by ID"""
    response = client.get(
        f"{settings.API_V1_STR}/devices/{device.device_id}",
        headers={"Authorization": f"Bearer {admin_token}"}
    )
    
    # Check response
    assert response.status_code == 200
    data = response.json()
    assert str(data["device_id"]) == str(device.device_id)
    assert data["name"] == device.name
    assert data["mac_address"] == device.mac_address


def test_get_device_by_id_customer_user_own_customer(client: TestClient, customer_user_token: str, device: Device):
    """Test customer user getting a device from their customer"""
    response = client.get(
        f"{settings.API_V1_STR}/devices/{device.device_id}",
        headers={"Authorization": f"Bearer {customer_user_token}"}
    )
    
    # Check response
    assert response.status_code == 200
    data = response.json()
    assert str(data["device_id"]) == str(device.device_id)

def test_get_device_by_id_customer_user_different_customer(client: TestClient, customer_user_token: str, suspended_customer: Customer, admin_token: str):
    """Test customer user attempting to get a device from a different customer"""
    # First create a device for the suspended customer
    device_data = {
        "description": "A test device for a different customer",
        "mac_address": "DD:EE:FF:11:22:33",
        "serial_number": "SNDIFFERENT",
        "device_type": "NVIDIA_JETSON",
        "firmware_version": "1.0.0",
        "location": "Other Location",
        "customer_id": str(suspended_customer.customer_id),
        "ip_address": "192.168.1.250"
    }
    
    response = client.post(
        f"{settings.API_V1_STR}/devices",
        headers={"Authorization": f"Bearer {admin_token}"},
        json=device_data
    )
    
    assert response.status_code == 200
    created_device = response.json()
    
    # Now get the device by ID as customer user
    response = client.get(
        f"{settings.API_V1_STR}/devices/{created_device['device_id']}",
        headers={"Authorization": f"Bearer {customer_user_token}"}
    )
    
    # Check response - should be forbidden
    assert response.status_code == 403
    data = response.json()
    assert "detail" in data
    assert "Not authorized" in data["detail"]

def test_get_nonexistent_device(client: TestClient, admin_token: str):
    """Test getting a non-existent device"""
    nonexistent_id = uuid.uuid4()
    response = client.get(
        f"{settings.API_V1_STR}/devices/{nonexistent_id}",
        headers={"Authorization": f"Bearer {admin_token}"}
    )
    
    # Check response - should not found
    assert response.status_code == 404
    data = response.json()
    assert "detail" in data
    assert "not found" in data["detail"]

# Test cases for updating a device (PUT /devices/{device_id})
def test_update_device_admin(client: TestClient, db: Session, admin_token: str, device: Device):
    """Test admin updating a device"""
    update_data = {
        "description": "Updated Description",
        "firmware_version": "2.0.0",
        "location": "Updated Location",
        "ip_address": "192.168.1.200"
    }
    
    response = client.put(
        f"{settings.API_V1_STR}/devices/{device.device_id}",
        headers={"Authorization": f"Bearer {admin_token}"},
        json=update_data
    )
    
    # Check response
    assert response.status_code == 200
    data = response.json()
    assert data["description"] == update_data["description"]
    assert data["firmware_version"] == update_data["firmware_version"]
    assert data["location"] == update_data["location"]
    
    # Verify database updates
    db.expire_all()
    updated_device = db.query(Device).filter(Device.device_id == device.device_id).first()
    assert updated_device.description == update_data["description"]
    
    # Verify audit log
    audit_log = db.query(AuditLog).filter(
        AuditLog.action_type == "DEVICE_UPDATE",
        AuditLog.resource_id == str(device.device_id)
    ).first()
    assert audit_log is not None


def test_update_device_customer_admin(client: TestClient, customer_admin_token: str, device: Device):
    """Test customer admin updating a device from their customer"""
    update_data = {
        "description": "Customer Admin Updated",
        "firmware_version": "3.0.0",
        "location": "New Location"
    }
    
    response = client.put(
        f"{settings.API_V1_STR}/devices/{device.device_id}",
        headers={"Authorization": f"Bearer {customer_admin_token}"},
        json=update_data
    )
    
    # Check response
    assert response.status_code == 200
    data = response.json()
    assert data["description"] == update_data["description"]
    assert data["firmware_version"] == update_data["firmware_version"]
    assert data["location"] == update_data["location"]

def test_update_device_customer_user(client: TestClient, customer_user_token: str, device: Device):
    """Test customer user attempting to update a device (no permission)"""
    update_data = {
        "description": "Unauthorized Update",
        "location": "Unauthorized Location"
    }
    
    response = client.put(
        f"{settings.API_V1_STR}/devices/{device.device_id}",
        headers={"Authorization": f"Bearer {customer_user_token}"},
        json=update_data
    )
    
    # Check response - should be forbidden
    assert response.status_code == 403
    data = response.json()
    assert "detail" in data
    assert "enough privileges" in data["detail"]

# Test cases for provisioning a device (POST /devices/{device_id}/provision)
@patch('app.utils.aws_iot.iot_core.provision_device')
@patch('app.crud.device.device.update_cloud_info')
@patch('app.crud.customer.customer.get_by_id')
def test_provision_device(mock_get_customer, mock_update_cloud_info, mock_provision, 
                          client: TestClient, db: Session, admin_token: str, device: Device):
    """Test provisioning a device"""
    # Configure mocks
    customer_mock = MagicMock()
    customer_mock.iot_thing_group_name = "test_group"
    mock_get_customer.return_value = customer_mock
    
    mock_provision.return_value = {
        "thing_name": "test_thing",
        "thing_arn": "arn:aws:iot:region:account:thing/test_thing",
        "certificate_id": "cert_id",
        "certificate_arn": "arn:aws:iot:region:account:cert/cert_id",
        "certificate_path": "certificates/cert_id/cert_id.pem",
        "private_key_path": "certificates/cert_id/cert_id.key",
        "certificate_url": "https://example.com/cert.pem",
        "private_key_url": "https://example.com/key.pem"
    }
    
    mock_update_cloud_info.return_value = Device(
        device_id=device.device_id,
        name=device.name,
        customer_id=device.customer_id,
        device_type=device.device_type,
        thing_name="test_thing",
        thing_arn="arn:aws:iot:region:account:thing/test_thing",
        certificate_id="cert_id",
        certificate_arn="arn:aws:iot:region:account:cert/cert_id",
        certificate_path="certificates/cert_id/cert_id.pem",
        private_key_path="certificates/cert_id/cert_id.key",
        status=DeviceStatus.PROVISIONED
    )
    
    response = client.post(
        f"{settings.API_V1_STR}/devices/{device.device_id}/provision",
        headers={"Authorization": f"Bearer {admin_token}"}
    )
    
    # Check response
    assert response.status_code == 200
    data = response.json()
    assert "device_id" in data
    assert "thing_name" in data
    assert "certificate_url" in data
    assert "private_key_url" in data
    
    # Verify the correct functions were called
    mock_provision.assert_called_once()
    mock_update_cloud_info.assert_called_once()

def test_provision_device_no_permission(client: TestClient, customer_user_token: str, device: Device):
    """Test customer user attempting to provision a device (no permission)"""
    response = client.post(
        f"{settings.API_V1_STR}/devices/{device.device_id}/provision",
        headers={"Authorization": f"Bearer {customer_user_token}"}
    )
    
    # Check response - should be forbidden
    assert response.status_code == 403
    data = response.json()
    assert "detail" in data
    assert "enough privileges" in data["detail"]


@patch('app.crud.device.device.get_by_id')
def test_provision_already_provisioned_device(mock_get_by_id, client: TestClient, admin_token: str, active_device: Device):
    """Test provisioning an already provisioned device"""
    # Active device already has thing_name
    mock_get_by_id.return_value = active_device
    
    response = client.post(
        f"{settings.API_V1_STR}/devices/{active_device.device_id}/provision",
        headers={"Authorization": f"Bearer {admin_token}"}
    )
    
    # Check response - should fail
    assert response.status_code == 400
    data = response.json()
    assert "detail" in data
    assert "already provisioned" in data["detail"]

# Test cases for decommissioning a device (POST /devices/{device_id}/decommission)
@patch('app.crud.device.device.decommission')
def test_decommission_device(mock_decommission, client: TestClient, db: Session, admin_token: str, active_device: Device):
    """Test decommissioning a device"""
    # Mock the database operation for decommissioning
    mock_decommission.return_value = Device(
        device_id=active_device.device_id,
        name=active_device.name,
        customer_id=active_device.customer_id,
        device_type=active_device.device_type,
        status=DeviceStatus.DECOMMISSIONED,
        is_online=False,                         
        created_at=datetime.now(),      
        updated_at=datetime.now()
    )
    
    response = client.post(
        f"{settings.API_V1_STR}/devices/{active_device.device_id}/decommission",
        headers={"Authorization": f"Bearer {admin_token}"}
    )
    
    # Check response
    assert response.status_code == 200
    data = response.json()
    assert data["status"] == "DECOMMISSIONED"
    
    # Verify function was called
    mock_decommission.assert_called_once()


def test_decommission_device_no_permission(client: TestClient, customer_user_token: str, device: Device):
    """Test customer user attempting to decommission a device (no permission)"""
    response = client.post(
        f"{settings.API_V1_STR}/devices/{device.device_id}/decommission",
        headers={"Authorization": f"Bearer {customer_user_token}"}
    )
    
    # Check response - should be forbidden
    assert response.status_code == 403
    data = response.json()
    assert "detail" in data
    assert "enough privileges" in data["detail"]


# Test cases for activating a device (POST /devices/{device_id}/activate)
@patch('app.crud.device.device.activate')
def test_activate_device(mock_activate, client: TestClient, db: Session, admin_token: str, device: Device):
    """Test activating a device"""
    # Mock the database operation for activation
    mock_activate.return_value = Device(
        device_id=device.device_id,
        name=device.name,
        customer_id=device.customer_id,
        device_type=device.device_type,
        status=DeviceStatus.ACTIVE,
        is_online=True,                         
        created_at=datetime.now(),      
        updated_at=datetime.now()
    )
    
    response = client.post(
        f"{settings.API_V1_STR}/devices/{device.device_id}/activate",
        headers={"Authorization": f"Bearer {admin_token}"}
    )
    
    # Check response
    assert response.status_code == 200
    data = response.json()
    assert data["status"] == "ACTIVE"
    
    # Verify function was called
    mock_activate.assert_called_once()

def test_activate_device_no_permission(client: TestClient, customer_user_token: str, device: Device):
    """Test customer user attempting to activate a device (no permission)"""
    response = client.post(
        f"{settings.API_V1_STR}/devices/{device.device_id}/activate",
        headers={"Authorization": f"Bearer {customer_user_token}"}
    )
    
    # Check response - should be forbidden
    assert response.status_code == 403
    data = response.json()
    assert "detail" in data
    assert "enough privileges" in data["detail"]


# Test delete device endpoint (DELETE /devices/{device_id})
@patch('app.utils.aws_iot.iot_core.delete_thing_certificate')
@patch('app.crud.device.device.remove')
def test_delete_device(mock_remove, mock_delete_thing, client: TestClient, db: Session, admin_token: str, active_device: Device):
    """Test deleting a device"""
    # Configure mocks
    mock_delete_thing.return_value = True
    mock_remove.return_value = Device(
        device_id=active_device.device_id,
        name=active_device.name,
        customer_id=active_device.customer_id,
        device_type=active_device.device_type,
        status=DeviceStatus.DECOMMISSIONED,
        is_online=True,                         
        created_at=datetime.now(),      
        updated_at=datetime.now()
    )
    
    response = client.delete(
        f"{settings.API_V1_STR}/devices/{active_device.device_id}",
        headers={"Authorization": f"Bearer {admin_token}"}
    )
    
    # Check response
    assert response.status_code == 200
    
    # Verify functions were called
    mock_remove.assert_called_once()

def test_delete_device_no_permission(client: TestClient, customer_user_token: str, device: Device):
    """Test customer user attempting to delete a device (no permission)"""
    response = client.delete(
        f"{settings.API_V1_STR}/devices/{device.device_id}",
        headers={"Authorization": f"Bearer {customer_user_token}"}
    )
    
    # Check response - should be forbidden
    assert response.status_code == 403
    data = response.json()
    assert "detail" in data
    assert "enough privileges" in data["detail"]

def test_delete_nonexistent_device(client: TestClient, admin_token: str):
    """Test deleting a non-existent device"""
    nonexistent_id = uuid.uuid4()
    response = client.delete(
        f"{settings.API_V1_STR}/devices/{nonexistent_id}",
        headers={"Authorization": f"Bearer {admin_token}"}
    )
    
    # Check response - should not found
    assert response.status_code == 404
    data = response.json()
    assert "detail" in data
    assert "not found" in data["detail"]